import logging
from aiogram import types, Dispatcher
from aiogram.dispatcher.filters import Text
import aiogram.utils.markdown as md
from aiogram.dispatcher import FSMContext

from configs.json_works import write_json
from core.bot import bot
from keyboards.yes_or_no import yes_or_no_keyboard
from keyboards.default import default_keyboard
from states.add_vds import AddVDS

logger = logging.getLogger(__name__)

async def add_vds(message: types.Message, state: FSMContext):
    if message.from_user.id != bot._settings['chat_id']:
        return await message.answer('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ')

    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–µ—Ä–≤–µ—Ä–∞:')
    await state.set_state(AddVDS.name)

async def add_vds_name(message: types.Message, state: FSMContext):
    name = message.text
    await state.update_data(name=name)
    await message.answer('–•–æ—Ä–æ—à–æ. –¢–µ–ø–µ—Ä—å, –≤–≤–µ–¥–∏—Ç–µ IP-–∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞:')
    await state.set_state(AddVDS.ip)

async def add_vds_ip(message: types.Message, state: FSMContext):
    ip = message.text
    await state.update_data(ip=ip)
    await message.answer('–¢–µ–ø–µ—Ä—å, –≤–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞:')
    await state.set_state(AddVDS.port)

async def add_vds_port(message: types.Message, state: FSMContext):
    port = message.text
    await state.update_data(port=port)
    await message.answer('–¢–µ–ø–µ—Ä—å, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞:')
    await state.set_state(AddVDS.username)

async def add_vds_user(message: types.Message, state: FSMContext):
    username = message.text
    await state.update_data(username=username)
    await message.answer('–¢–µ–ø–µ—Ä—å, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞:')
    await state.set_state(AddVDS.password)

async def add_vds_password(message: types.Message, state: FSMContext):
    password = message.text
    await state.update_data(password=password)
    data = await state.get_data()
    name = data.get('name')
    ip = data.get('ip')
    port = data.get('port')
    username = data.get('username')
    password = data.get('password')
    await bot.send_message(message.chat.id,
        md.text(
            '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:',
            md.bold('–ò–º—è —Å–µ—Ä–≤–µ—Ä–∞: ') + md.escape_md(name),
            md.bold('IP: ') + md.escape_md(ip),
            md.bold('–ü–æ—Ä—Ç: ') + md.escape_md(port),
            md.bold('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ') + md.escape_md(username),
            md.bold('–ü–∞—Ä–æ–ª—å: ') + md.escape_md(password),
            sep = '\n'
        ), parse_mode='MarkdownV2')
    await message.answer('–ï—Å–ª–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", –µ—Å–ª–∏ –Ω–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"', reply_markup=yes_or_no_keyboard)
    await state.set_state(AddVDS.confirm)

async def add_vds_confirm(message: types.Message, state: FSMContext):
    if message.text == '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å':
        data = await state.get_data()
        name = data.get('name')
        ip = data.get('ip')
        port = data.get('port')
        username = data.get('username')
        password = data.get('password')
        await write_json({
            'name': name,
            'ip': ip,
            'port': port,
            'username': username,
            'password': password
        })
        await message.answer('‚úÖ –°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω', reply_markup=default_keyboard)
        await state.finish()
    elif message.text == '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å':
        await message.answer('‚ùå –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞', reply_markup=default_keyboard)
        await state.finish()


def setup(dp: Dispatcher):
    dp.register_message_handler(add_vds, Text(equals = 'üíª –î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä'), state='*')
    dp.register_message_handler(add_vds, commands=['add_vds'], state='*')
    dp.register_message_handler(add_vds_name, state=AddVDS.name)
    dp.register_message_handler(add_vds_ip, state=AddVDS.ip)
    dp.register_message_handler(add_vds_port, state=AddVDS.port)
    dp.register_message_handler(add_vds_user, state=AddVDS.username)
    dp.register_message_handler(add_vds_password, state=AddVDS.password)
    dp.register_message_handler(add_vds_confirm, Text(equals = ['‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å']), state=AddVDS.confirm)
